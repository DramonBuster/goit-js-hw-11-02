{"version":3,"sources":["js/03-promisify.js"],"names":["delay","ms","Promise","resolve","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","username","map","user","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","reject","setTimeout","id","logSuccess","logError","warn"],"mappings":";AACA,MAAMA,EAAQC,GAELC,QAAQC,QAAQF,GAGnBG,EAASC,GAAQC,QAAQC,uBAAuBF,OAGtDL,EAAM,KAAMQ,KAAKJ,GACjBJ,EAAM,KAAMQ,KAAKJ,GACjBJ,EAAM,MAAMQ,KAAKJ,GAGjB,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,IAGpBC,EAAkB,CAACC,EAAUC,IAC1B,IAAIZ,QAAQC,IACjBA,EAAQU,EAASE,IAAIC,GACnBA,EAAKN,OAASI,EAAW,IAAKE,EAAML,QAASK,EAAKL,QAAWK,MAUnEJ,EAAgBH,EAAO,SAASD,KAAKF,QAAQW,OAC7CL,EAAgBH,EAAO,QAAQD,KAAKF,QAAQW,OAG5C,MAAMC,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAkBC,IAChBzB,MAAAA,EAAQkB,EAA0B,IAAK,KAEtC,OAAA,IAAIhB,QAAQ,CAACC,EAASuB,KAC3BC,WAAW,KACQN,KAAKE,SAAW,GAGjCpB,EAAQ,CAAEyB,GAAIH,EAAYG,GAAIvB,KAAML,IAEpC0B,EAAOD,EAAYG,KAEpB5B,MAIC6B,EAAa,EAAGD,GAAAA,EAAIvB,KAAAA,MACxBC,QAAQC,mBAAmBqB,kBAAmBvB,QAG1CyB,EAAWF,IACftB,QAAQyB,qCAAqCH","file":"03-promisify.4efe27aa.js","sourceRoot":"../src","sourcesContent":["// ======================= Subtask 1 =======================\nconst delay = ms => {\n  // Change this function\n  return Promise.resolve(ms);\n};\n\nconst logger = time => console.log(`Fulfilled after ${time}ms`);\n\n// Tests\ndelay(2000).then(logger); // Fulfilled after 2000ms\ndelay(1000).then(logger); // Fulfilled after 1000ms\ndelay(1500).then(logger); // Fulfilled after 1500ms\n\n// ======================= Subtask 2 =======================\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: false },\n];\n\nconst toggleUserState = (allUsers, username) => {\n  return new Promise(resolve => {\n    resolve(allUsers.map(user =>\n      user.name === username ? { ...user, active: !user.active } : user\n    ));\n  })\n};\n\n// Currently the function works like this\n// toggleUserState(users, 'Mango', console.table);\n// toggleUserState(users, 'Ajax', console.table);\n\n// The function should work like this\ntoggleUserState(users, 'Mango').then(console.table);\ntoggleUserState(users, 'Ajax').then(console.table);\n\n// ======================= Subtask 3 =======================\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = transaction => {\n  const delay = randomIntegerFromInterval(200, 500);\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n    const canProcess = Math.random() > 0.3;\n\n    if (canProcess) {\n      resolve({ id: transaction.id, time: delay });\n    } else {\n      reject(transaction.id);\n    }\n  }, delay);\n  })\n};\n\nconst logSuccess = ({ id, time }) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n// Currently the function works like this\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n\n// The function should work like this\n// makeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n// makeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n// makeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n// makeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n"]}